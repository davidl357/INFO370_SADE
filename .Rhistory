df = read.xls("boston.xls", sheet = 1, header = true)
df = read.xls("boston.xls", sheet = 1, header = true)
df = read.xls("./boston.xls", sheet = 1, header = true)
install.packages("xlsReadWrite")
df = read.rable("clipboard")
library(ggplot2)
library(dplyr)
df = read.table("clipboard")
library(ggplot2)
library(dplyr)
df = read.table("boston.csv", header = TRUE)
library(ggplot2)
library(dplyr)
df = read.table("boston.csv", header = TRUE)
View(df)
df = read.datatable("boston.csv", header = TRUE)
df = read.table("boston.csv", header = TRUE)
df = read.csv("boston.csv", header = TRUE)
library(ggplot2)
library(dplyr)
df = read.csv("boston.csv", header = TRUE)
my.tbl <- ggplot2(df) +
geom_freqpoly(x = df$RAD)
library(ggplot2)
library(dplyr)
df <- read.csv("boston.csv", header = TRUE)
my.tbl <- ggplot2(df) +
geom_freqpoly(x = df$RAD)
df <- read.csv("boston.csv", header = TRUE)
my.tbl <- ggplot(df) +
geom_freqpoly(x = df$RAD)
my.tbl
my.tbl <- ggplot(df, aes(df$RAD)) +
geom_freqpoly()
my.tbl
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
df <- read.csv("boston.csv", header = TRUE)
tbl <- table(df)
tbl <- table(df$RAD)
tbl
rd.value <- round(df$RM, digits=0)
rd.value <- round(df$RM, digits=0)
library(ggplot2)
library(dplyr)
library(plyr)
df <- read.csv("boston.csv", header = TRUE)
tbl <- table(df$RAD)
tbl
rd.value <- round(df$RM, digits=0)
bg <- ggplot(df, aes(df$RAD)) +
geom_bar()
bg
bg <- ggplot(df, aes(df$RAD)) +
geom_bar() +
xlab("Rooms per Dwelling")
bg
library(ggplot2)
library(dplyr)
library(plyr)
df <- read.csv("boston.csv", header = TRUE)
tbl <- table(df$RAD)
tbl
rd.value <- round(df$RM, digits=0)
bg <- ggplot(df, aes(df$RAD)) +
geom_bar() +
xlab("Rooms per Dwelling")
bg
sp <- ggplot(df, aes(x=df$MV, y=df$ï..CRIM) +
geom_point()
sp
sp <- ggplot(df, aes(x=df$MV, y=df$ï..CRIM) +
geom_point(x, y)
sp
df <- read.csv("boston.csv", header = TRUE)
tbl <- table(df$RAD)
tbl
df[1] <- "CRIM"
df <- read.csv("boston.csv", header = TRUE)
`colnames<-`(df[1], "CRIM")
colnames <- (df[1], "CRIM")
colnames(df)[1] <- "CRIM"
library(ggplot2)
library(dplyr)
library(plyr)
df <- read.csv("boston.csv", header = TRUE)
colnames(df)[1] <- "CRIM"
tbl <- table(df$RAD)
tbl
rd.value <- round(df$RM, digits=0)
bg <- ggplot(df, aes(df$RAD)) +
geom_bar() +
xlab("Rooms per Dwelling")
bg
sp <- ggplot(df, aes(x=df$MV, y=df$ï..CRIM) +
geom_point(x, y)
sp
sp <- ggplot(df, aes(x=df$MV, y=df$CRIM) +
geom_point(x, y)
sp
sp <- ggplot(df, aes(x=df$MV, y=df$CRIM) +
geom_point(x, y)
sp
sp <- ggplot(df, aes(x=df$MV, y=df$CRIM) +
geom_point()
sp
sp <- ggplot(df, aes(x=df$MV, y=df$CRIM) +
geom_point()
sp <- ggplot(df, aes(x=MV, y=CRIM) +
geom_point()
sp
bg <- ggplot(df, aes(df$RAD)) +
geom_bar() +
xlab("Rooms per Dwelling")
bg
sp <- ggplot(df, aes(x=MV, y=CRIM) +
geom_point()
sp
sp <- ggplot(df, aes(x=df$MV, y=df$CRIM)) +
geom_point()
sp
sp <- ggplot(df, aes(x=df$CRIM, y=df$MV)) +
geom_point() +
xlab("Crime Rate per Capita by Town") +
ylab("Median Value of Owner-occupied Homes in $1000's")
sp
sp <- ggplot(df, aes(x=df$CRIM, y=df$MV)) +
geom_point() +
xlab("Crime Rate per Capita by Town") +
ylab("Median Value of Homes in $1000's") +
geom_smooth(model = lm)
sp
sp <- ggplot(df, aes(x=df$CRIM, y=df$MV)) +
geom_point() +
xlab("Crime Rate per Capita by Town") +
ylab("Median Value of Homes in $1000's") +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE)
sp
math.data = read.csv("./MathPlacement.csv")
View(math.data)
summary(math.data$PlcmtScore)
View(math.data)
data <- read.csv("./MathPlacement.csv")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("./MathPlacement.csv")
View(data)
gender.mode <- mode(data$Gender)
satm.mean <- mean(data$SATM)
actm.mean <- mean(data$ACTM)
gpa.mean <- mean(data$GPAadj)
size.mean <- mean(data$Size)
score.mean <- mean(data$PlcmtScore)
gender.mode <- mode(data$Gender)
satm.mean <- mean(data$SATM)
gender<- mode(data$Gender)
satm <- mean(data$SATM)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("./MathPlacement.csv")
gender.mode <- mode(data$Gender, na.rm=TRUE)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("./MathPlacement.csv")
gender.mode <- mode(data$Gender, na.rm=TRUE)
satm.mean <- mean(data$SATM, na.rm=TRUE)
gender.mode <- mode(data$Gender)
gender.missing <- sum(data$Gender)
satm.mean <- mean(data$SATM, na.rm=TRUE)
satm.missing <- sum(data$SATM)
actm.mean <- mean(data$ACTM, na.rm=TRUE)
actm.missing <- sum(data$ACTM)
gpa.mean <- mean(data$GPAadj, na.rm=TRUE)
gpa.missing <- sum(data$GPAadj)
score.mean <- mean(data$PlcmtScore, na.rm=TRUE)
satm.missing <- sum(is.na(data$SATM))
gender.mode <- mode(data$Gender)
data <- read.csv("./MathPlacement.csv")
gender.mode <- mode(data$Gender)
gender.missing <- sum(is.na(data$Gender))
satm.mean <- mean(data$SATM, na.rm=TRUE)
satm.missing <- sum(is.na(data$SATM))
actm.mean <- mean(data$ACTM, na.rm=TRUE)
actm.missing <- sum(is.na(data$ACTM))
gpa.mean <- mean(data$GPAadj, na.rm=TRUE)
gpa.missing <- sum(is.na(data$GPAadj))
size.mean <- mean(data$Size, na.rm=TRUE)
size.missing <- sum(is.na(data$Size))
score.mean <- mean(data$PlcmtScore, na.rm=TRUE)
score.missing <- sum(is.na(data$PlcmtScore))
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("./MathPlacement.csv")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
gender.mode <- getmode(data$Gender)
install("DescTools")
install.packages("DescTool")
View(data)
gender.mode <- getmode(na.exclude(data$Gender))
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("./MathPlacement.csv")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sum <- summary(data$PlcmtScore)
sum
sum <- summary(data$PlcmtScore, na.rm=TRUE)
sum
size <- summary(data$Size, na.rm=TRUE)
print("fds")
sd(data$GPAadj, na.rm=TRUE)
score <- summary(data$PlcmtScore, na.rm=TRUE)
append(score, score.sd)
append(score, score.sd)
score <- summary(data$PlcmtScore, na.rm=TRUE)
score.sd <- sd(data$PlcmtScore, na.rm=TRUE)
append(score, score.sd)
summary(data)
variables <- c("Gender", "SATM", "ACTM", "Size", "GPAadj", "PlcmtScore")
summary(data[variables])
sd(data[variables])
sapply(data[variables], sd)
sapply(na.omit(data[variables]), sd)
variables <- c("Gender", "PSATM", "SATM", "ACTM", "GPAadj", "Size", "PlcmtScore")
correlation.matrix <- cor(data[variables])
library(corrplot)
install.packages("corrplot")
library("corrplot")
corrplot(correlation.matrix, type="upper", order="hclust")
correlation.matrix <- cor(data[variables])
View(correlation.matrix)
correlation.matrix <- cor(na.omit(data[variables]))
corrplot(correlation.matrix, type="upper", order="hclust")
corrplot(correlation.matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = "45")
corrplot(correlation.matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
matrix <- cor(na.omit(data[variables]))
corrplot(matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
math.sections <- 5
probability <- 1 / math.possibilities
math.possibilities <- math.sections * math.sections
probability <- 1 / math.possibilities
math.sections <- c("A", "B", "C", "D", "E")
probability <- 1 / math.space
math.space <- data.frame(sections = math.sections)
View(math.space)
install.packages("prob")
math.sections <- LETTERS[1:5]
chem.sections <- LETTERS[1:8]
physics.sections <- LETTERS[1:6]
hist.sections <- LETTERS[1:4]
expand.grid(rick.m = math.sections, marty.m =math.sections)
expand.grid(rick.m = math.sections, rick.c = chem.sections, rick.p = physics.sections, rick.h = hist.sections,
marty.m = math.sections, marty.c = chem.sections, marty.p = physics.sections, marty.h = hist.sections)
library("prob")
probability <- Prob(space, rick.m == "A", marty.m == "A")
space <- expand.grid(rick.m = math.sections, rick.c = chem.sections, rick.p = physics.sections, rick.h = hist.sections,
marty.m = math.sections, marty.c = chem.sections, marty.p = physics.sections, marty.h = hist.sections)
probability <- Prob(space, rick.m == "A", marty.m == "A")
space <- expand.grid(rick.m = LETTERS[1:5], rick.c = LETTERS[1:8], rick.p = LETTERS[1:6], rick.h = LETTERS[1:4],
marty.m = LETTERS[1:5], marty.c = LETTERS[1:8], marty.p = LETTERS[1:6], marty.h = LETTERS[1:4])
subset(space, rick.m == "A", marty.m == "A")
View(space)
s <- subset(space, rick.m == "A", marty.m == "A")
probability <- Prob(s)
print(paste0("Probability is ", probability))
chem <- subset(space, rick.c == "F", marty.c == "F")
a <- subset(space, rick.m == "A", marty.m == "A")
print(paste0("Probability is ", probability))
b <- subset(space, rick.c == "F", marty.c == "F")
probability <- Prob(b)
b <- subset(space, rick.c == "F", marty.c == "F")
probability <- Prob(b)
probability <- Prob(a)
print(paste0("Probability is ", probability))
print(paste0("Probability is ", probability))
space <- probspace(expand.grid(rick.m = LETTERS[1:5], rick.c = LETTERS[1:8], rick.p = LETTERS[1:6], rick.h = LETTERS[1:4],
marty.m = LETTERS[1:5], marty.c = LETTERS[1:8], marty.p = LETTERS[1:6], marty.h = LETTERS[1:4]))
View(space)
a <- subset(space, rick.m == "A", marty.m == "A")
probability <- Prob(a)
space <- probspace(expand.grid(rick.m = LETTERS[1:5], rick.c = LETTERS[1:8], rick.p = LETTERS[1:6], rick.h = LETTERS[1:4],
marty.m = LETTERS[1:5], marty.c = LETTERS[1:8], marty.p = LETTERS[1:6], marty.h = LETTERS[1:4]))
a <- subset(space, rick.m == "A", marty.m == "A")
View(a)
View(space)
a <- subset(space, rick.m == "A" & marty.m == "A")
probability <- Prob(a)
print(paste0("Probability is ", probability))
b <- subset(space, rick.c == "F" & marty.c == "F")
probability <- Prob(b)
print(paste0("Probability is ", probability))
c <- subset(space, rick.m == marty.m & rick.c == marty.c)
View(c)
print(paste0("Probability is ", probability))
c <- subset(space, rick.m == marty.m & rick.c == marty.c)
probability <- Prob(c)
print(paste0("Probability is ", probability))
random.selector <- 5 + 8 + 6 + 4
random.space <- probspace(expand.grid(section = 1:24))
View(random.space)
math.sections <- 1:5
math <- 5
chem <- 8
phys <- 6
history <- 4
total <- math + chem + phys + history
rick <- math / total
math <- math - 1
total <- total - 1
marty <- math /total
probability <- rick * marty
print(paste0("Probability is ", probability))
rick <- 1 / total
marty <-  1 / total
probability <- rick * marty
print(paste0("Probability is ", probability))
dnorm(seq(135, 345) , mean = 240, sd = 30)
plot(dnorm)
plot(x, y)
x <- seq(135, 345)
y <- dnorm(x, mean = 240, sd = 30)
plot(x, y)
plot(x, y, type="l")
y <- pnorm(x, mean = 240, sd = 30)
plot(x, y, type="l")
abline(v = 240, lty = 3)
title(main="Distribution of Completion Speed", xlab="Completion Speed in minutes", ylab="Density")
x <- seq(135, 345)
y <- dnorm(x, mean = 240, sd = 30)
plot(x, y, type="l")
abline(v = 240, lty = 3)
plot(x, y, type="l")
plot(x, y, type="l") % abline(v = 240, lty = 3)
plot(x, y, type="l") abline(v = 240, lty = 3)
plot(x, y, type="l")
abline(v = 240, lty = 3)
title(main="Distribution of Completion Speed", xlab="Completion Speed in minutes", ylab="Density")
install.packages("mosaic")
library("mosaic")
plotDist('norm', mean = 240, sd = 30, xlab="Completion Speed in minutes", ylab="Density")
x <- seq(100, 380)
y <- dnorm(x, mean = 240, sd = 30)
plot(x, y, type="l")
library("corrplot")
library("prob")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("./MathPlacement.csv")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
z <- (200 - 240) / 30
percentage <- pnorm(z)
cat(paste0("Z-Score: ", z, "\nPercentage Faster than: ", percentage))
cat(paste0("Z-Score: ", z, "\nPercentage Faster than: ", percentage * 100))
cat(paste0("Z-Score: ", z, "\nPercentage Faster than: ", percentage * 100, "%"))
cat(paste0("Z-Score: ", z, "\nFaster than: ", percentage * 100, "%"))
z <- 1.4
completion.time <- (z * 30) + 240
cat(paste0("Z-Score: ", z, "\nFaster than: ", (1 - percentage) * 100, "%"))
z <- (200 - 240) / 30
percentage <- pnorm(z)
cat(paste0("Z-Score: ", z, "\nFaster than: ", (1 - percentage) * 100, "%"))
z <- 1.4
completion.time <- (z * 30) + 240
percentage <- pnorm(z)
cat(paste0("Z-Score: ", z, "\nCompletion Time: ", completion.time, "\nSlower than: ", percentage * 100, "%"))
cat(paste0("Z-Score: ", z, "\nCompletion Time: ", completion.time, "minutes\nSlower than: ", percentage * 100, "%"))
cat(paste0("Z-Score: ", z, "\nCompletion Time: ", completion.time, " minutes\nSlower than: ", percentage * 100, "%"))
plot(d, main="Distribution of Placement Score")
d <- density(na.omit(data$PlcmtScore))
plot(d, main="Distribution of Placement Score")
linearMod <- lm(PlcmtScore ~ GPAadj, data=data)
print(linearMod)
linearMod <- lm(PlcmtScore ~ GPAadj, data=data)
print(paste0("PlcmtScore = ", linearMod.coefficients[0], " + ", linearMod.coefficients[1], " * GPAadj"))
View(linearMod)
print(paste0("PlcmtScore = ", linearMod$coefficients[0], " + ", linearMod.coefficients[1], " * GPAadj"))
print(paste0("PlcmtScore = ", linearMod$coefficients[0], " + ", linearMod$coefficients[1], " * GPAadj"))
print(paste0("PlcmtScore = ", linearMod$coefficients[1], " + ", linearMod$coefficients[2], " * GPAadj"))
print(paste0("PlcmtScore = ", linearMod$coefficients[1], " + ", linearMod$coefficients[2], "GPAadj"))
print(paste0("PlcmtScore = ", linearMod$coefficients[1], " + ", linearMod$coefficients[2], " GPAadj"))
print(paste0("PlcmtScore = ", linearMod$coefficients[1], " + ", linearMod$coefficients[2], "*GPAadj"))
summary(linearMod)
plot(x=data$GPAadj, y=data$PlcmtScore)
scatter.smooth(x=data$GPAadj, y=data$PlcmtScore)
scatter.smooth(x=data$GPAadj, y=data$PlcmtScore, xlab="GPAadj", ylab="PlcmtScore", main="Placement Score vs Adjusted GPA")
plot(x=data$GPAadj, y=data$PlcmtScore, xlab="GPAadj", ylab="PlcmtScore", main="Placement Score vs Adjusted GPA")
abline(a=linearMod$coefficients[1], b=linearMod$coefficients[2])
linearMod2 <- lm(PlcmtScore ~ SATM + ACTM + Size + GPAadj, data=data)
linearMod2 <- lm(PlcmtScore ~ SATM + ACTM + Size + GPAadj, data=data)
print(paste0("PlcmtScore = ", linearMod$coefficients[1], " + ", linearMod$coefficients[2], "*GPAadj"))
print(paste0("PlcmtScore = ", linearMod$coefficients[1], " + ", linearMod$coefficients[2], "*SATM"," + ", linearMod$coefficients[3], "*ACTM"," + ", linearMod$coefficients[4], "*Size"," + ", linearMod$coefficients[5], "*GPAadj"))
linearMod2 <- lm(PlcmtScore ~ SATM + ACTM + Size + GPAadj, data=data)
print(paste0("PlcmtScore = ", linearMod2$coefficients[1], " + ", linearMod2$coefficients[2], "*SATM"," + ", linearMod2$coefficients[3], "*ACTM"," + ", linearMod2$coefficients[4], "*Size"," + ", linearMod2$coefficients[5], "*GPAadj"))
summary(linearMod2)
linearMod3 <- lm(PlcmtScore ~ SATM + ACTM + Size + GPAadj + Gender, data=data)
print(paste0("PlcmtScore = ", linearMod3$coefficients[1], " + ", linearMod3$coefficients[2], "*SATM"," + ", linearMod3$coefficients[3], "*ACTM"," + ", linearMod3$coefficients[4], "*Size"," + ", linearMod3$coefficients[5], "*GPAadj", " + ", linearMod3$coefficients[6], "*Gender", ))
print(paste0("PlcmtScore = ", linearMod3$coefficients[1], " + ", linearMod3$coefficients[2], "*SATM"," + ", linearMod3$coefficients[3], "*ACTM"," + ", linearMod3$coefficients[4], "*Size"," + ", linearMod3$coefficients[5], "*GPAadj", " + ", linearMod3$coefficients[6], "*Gender"))
print(paste0("PlcmtScore = ", linearMod2$coefficients[1], " + ", linearMod2$coefficients[2], "*SATM"," + ", linearMod2$coefficients[3], "*ACTM"," + ", linearMod2$coefficients[4], "*Size"," + ", linearMod2$coefficients[5], "*GPAadj"))
summary(linearMod3)
summary(linearMod2)
linearMod4 <- lm(PlcmtScore ~ SATM + ACTM + GPAadj, data=data)
print(paste0("PlcmtScore = ", linearMod4$coefficients[1], " + ", linearMod4$coefficients[2], "*SATM"," + ", linearMod4$coefficients[3], "*ACTM"," + ", linearMod4$coefficients[4], "*GPAadj"))
summary(linearMod4)
summary(linearMod)
linearMod4 <- lm(PlcmtScore ~ ACTM + GPAadj, data=data)
print(paste0("PlcmtScore = ", linearMod4$coefficients[1], " + ", linearMod4$coefficients[2], "*ACTM"," + ", linearMod4$coefficients[3], "*GPAadj"))
summary(linearMod4)
View(linearMod4)
))
par(mfrow=c(2,3))
plot(x=data$PlcmtScore, y=predict(linearMod2), xlab="Actual Value", ylab="Predicted Value", main="Predicted Value vs Actual Value of Placement Score")
plot(x=na.omit(data$PlcmtScore), y=predict(linearMod2), xlab="Actual Value", ylab="Predicted Value", main="Predicted Value vs Actual Value of Placement Score")
plot(x=data$PlcmtScore, y=linearMod2$fitted.values, xlab="Actual Value", ylab="Predicted Value", main="Predicted Value vs Actual Value of Placement Score")
plot(x=na.omit(data$PlcmtScore), y=linearMod2$fitted.values, xlab="Actual Value", ylab="Predicted Value", main="Predicted Value vs Actual Value of Placement Score")
data2 <- na.omit(data)
plot(x=data2$PlcmtScore, y=linearMod2$fitted.values, xlab="Actual Value", ylab="Predicted Value", main="Predicted Value vs Actual Value of Placement Score")
plot(x=data$PlcmtScore, y=linearMod2$fitted.values, xlab="Actual Value", ylab="Predicted Value", main="Predicted Value vs Actual Value of Placement Score")
View(linearMod2)
View(linearMod2)
View(linearMod)
plot(x=linearMod2$model$PlcmtScore, y=linearMod2$fitted.values, xlab="Actual Value", ylab="Predicted Value", main="Predicted Value vs Actual Value of Placement Score")
plot(x=linearMod2$model$PlcmtScore, y=linearMod2$fitted.values, xlab="Actual Value", ylab="Predicted Value", main="Predicted Value vs Actual Value of Placement Score")
abline(a=0, b=1)
plot(x=linearMod4$model$PlcmtScore, y=linearMod4$fitted.values, xlab="Actual Value", ylab="Predicted Value", main="Predicted vs Actual Value of Placement Score (Model E)")
par(mfrow=c(2,3))
plot(x=linearMod2$model$PlcmtScore, y=linearMod2$fitted.values, xlab="Actual Value", ylab="Predicted Value", main="Predicted vs Actual Value of Placement Score (Model C)")
abline(a=0, b=1)
plot(x=linearMod4$model$PlcmtScore, y=linearMod4$fitted.values, xlab="Actual Value", ylab="Predicted Value", main="Predicted vs Actual Value of Placement Score (Model E)")
abline(a=0, b=1)
plot(linearMod2)
plot(x=linearMod2$fitted.values, y=linearMod2.stdres, xlab="Predicted Value", ylab="Standardized Residuals", main="Plot of Standardized Residuals (Model C)")
linearMod2.stdres <- rstandard(linearMod2)
plot(x=linearMod2$fitted.values, y=linearMod2.stdres, xlab="Predicted Value", ylab="Standardized Residuals", main="Plot of Standardized Residuals (Model C)")
plot(x=linearMod2$model$PlcmtScore, y=linearMod2$fitted.values, xlab="Actual Value", ylab="Predicted Value", main="Predicted vs Actual Value of Placement Score (Model C)")
d2$fitted.values, y=linearMod2.stdres, xlab="Predicted Value", ylab="Standardized Residuals", main="Plot of Standardized Residuals (Model C)")
plot(x=linearMod2$fitted.values, y=linearMod2.stdres, xlab="Predicted Value", ylab="Standardized Residuals", main="Plot of Standardized Residuals (Model C)")
abline(a=0, b=0)
plot.lm(linearMod2, which=c(2), caption=c("Normal Q-Q Plot"))
library("stats")
plot.lm(linearMod2, which=c(2), caption=c("Normal Q-Q Plot"))
plot(linearMod2, which=c(2), caption=c("Normal Q-Q Plot"))
plot(linearMod2, which=c(2), caption=c("Normal Q-Q Plot"), main="Normal Q-Q Plot")
setwd("~/INFO370/INFO370_SADE")
target.listings <- read.csv('./data/80ratinglistings.csv', stringsAsFactors = FALSE)
library(dplyr)
library(ggplot2)
target.listings <- read.csv('./data/80ratinglistings.csv', stringsAsFactors = FALSE)
# graph of ratings among the listings above 80 rating
rating.graph <- ggplot(data = target.listings) +
geom_bar(mapping = aes(x = review_scores_rating, color = "black", fill = "blue")) +
ggtitle("Total Number of Reviews Above 80") +
labs(x = "Review Scores", y = "Count") +
theme(legend.position = "none")
plot(rating.graph)
# graph of cleaniness among the listings above 80 rating
plot(cleanliness)
library(ggplot2)
target.listings <- read.csv('./data/80ratinglistings.csv', stringsAsFactors = FALSE)
# graph of ratings among the listings above 80 rating
rating.graph <- ggplot(data = target.listings) +
geom_bar(mapping = aes(x = review_scores_rating, color = "black", fill = "blue")) +
ggtitle("Total Number of Reviews Above 80") +
labs(x = "Review Scores", y = "Count") +
theme(legend.position = "none")
plot(rating.graph)
# graph of cleaniness among the listings above 80 rating
cleanliness <- ggplot(data = target.listings) +
geom_bar(mapping = aes(x = review_scores_cleanliness, color = "black", fill = "blue")) +
ggtitle("Cleanliness Rating based on Reviews for Listings Rated 80 or Above") +
labs(x = "Cleaniless Score (out of 10)") +
theme(legend.position = "none")
plot(cleanliness)
# graph of the correlation between listing score and number of reviews
num.reviews <- ggplot(data = target.listings) +
geom_point(mapping = aes(y = review_scores_rating, x = number_of_reviews, color = review_scores_rating)) +
ggtitle("Number of Reviews to Review Rating for Ratings 80 and Up") +
labs(y = "Listing Rating", x  = "Number of Reviews")
# density plot of cleanliness score
plot(density(target.listings$review_scores_cleanliness))
# density plot of cleanliness score
plot(density(na.omit(target.listings$review_scores_cleanliness)))
# density plot of cleanliness score
plot(density(na.omit(target.listings$number_of_reviews)))
plot(d)
polygon(d, col="red", border="blue")
d <- density(na.omit(target.listings$number_of_reviews))
plot(d)
polygon(d, col="red", border="blue")
polygon(d, col="red", border="black")
plot(d, main = "Density Plot of Cleanliness")
polygon(d, col="red", border="black")
library("corrplot")
library("prob")
library("stats")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("./MathPlacement.csv")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
variables <- c("Gender", "SATM", "ACTM", "Size", "GPAadj", "PlcmtScore")
summary(data[variables])
print("Standard Deviation")
sapply(na.omit(data[variables]), sd)
